@page "/"
@rendermode InteractiveServer
@inject WarehouseService WarehouseService
@inject IJSRuntime JSRuntime

<div class="container my-4">
    <h2 class="mb-4">Warehouse Management</h2>
    <!-- Nav tabs -->
    <ul class="nav nav-tabs" id="warehouseTab" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="pallet-tab" data-bs-toggle="tab" data-bs-target="#pallets" type="button" role="tab" aria-controls="pallets" aria-selected="true">Pallets</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="locations-tab" data-bs-toggle="tab" data-bs-target="#locations" type="button" role="tab" aria-controls="locations" aria-selected="false">Locations</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="history-tab" data-bs-toggle="tab" data-bs-target="#history" type="button" role="tab" aria-controls="history" aria-selected="false">Pallet Locations</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="robots-tab" data-bs-toggle="tab" data-bs-target="#robots" type="button" role="tab" aria-controls="robots" aria-selected="false">Robots</button>
        </li>
    </ul>

    <!-- Tab panes -->
    <div class="tab-content" id="warehouseTabContent">
        <!-- Pallet Tab (Unchanged) -->
        <div class="tab-pane fade show active" id="pallets" role="tabpanel" aria-labelledby="pallet-tab">
            <div class="d-flex justify-content-between align-items-center mt-3">
                <h4>Pallet List</h4>
                <button class="btn btn-success" @onclick="OpenAddPalletModal">Add Pallet</button>
            </div>
            <table class="table table-striped mt-2">
                <thead>
                    <tr>
                        <th>Pallet ID</th>
                        <th>Status</th>
                        <th>Current Location</th>
                        <th>Robot Assigned</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var pallet in pallets)
                    {
                        if (editPalletId == pallet.Pallet_ID)
                        {
                            <tr>
                                <td>@pallet.Pallet_ID</td>
                                <td><input class="form-control" @bind="editPallet.Status" /></td>
                                <td>@pallet.Current_Location</td>
                                <td>@pallet.Robot_ID</td>
                                <td>
                                    <button class="btn btn-success btn-sm" @onclick="() => SavePalletEdit(pallet.Pallet_ID!)">Save</button>
                                    <button class="btn btn-secondary btn-sm" @onclick="CancelPalletEdit">Cancel</button>
                                </td>
                            </tr>
                        }
                        else
                        {
                            <tr>
                                <td>@pallet.Pallet_ID</td>
                                <td>@pallet.Status</td>
                                <td>@pallet.Current_Location</td>
                                <td>@pallet.Robot_ID</td>
                                <td>
                                    <button class="btn btn-primary btn-sm me-1" @onclick="() => OpenMoveModal(pallet.Pallet_ID!)">Move</button>
                                    <button class="btn btn-warning btn-sm me-1" @onclick="() => StartPalletEdit(pallet.Pallet_ID!)">Update</button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => DeletePallet(pallet.Pallet_ID!)">Delete</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

        <!-- Locations Tab (Optimized with Pagination and Loading Indicator) -->
        <div class="tab-pane fade" id="locations" role="tabpanel" aria-labelledby="locations-tab">
            @if (isLoadingLocations)
            {
                <div class="text-center mt-3">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else
            {
                <div class="d-flex justify-content-between align-items-center mt-3">
                    <h4>Location List</h4>
                    <button class="btn btn-success" @onclick="OpenAddLocationModal">Add Location</button>
                </div>
                <table class="table table-striped mt-2">
                    <thead>
                        <tr>
                            <th>Location ID</th>
                            <th>Name</th>
                            <th>Parent Location</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var location in locations)
                        {
                            if (editLocationId == location.Location_ID)
                            {
                                <tr>
                                    <td>@location.Location_ID</td>
                                    <td><input class="form-control" @bind="editLocation.Name" /></td>
                                    <td>
                                        <select class="form-control" @bind="editLocation.Parent_Location_ID">
                                            <option value="">None</option>
                                            @foreach (var parent in locations.Where(l => l.Location_ID != editLocation.Location_ID))
                                            {
                                                <option value="@parent.Location_ID">@parent.Name</option>
                                            }
                                        </select>
                                    </td>
                                    <td>
                                        <button class="btn btn-success btn-sm" @onclick="() => SaveLocationEdit(location.Location_ID!)">Save</button>
                                        <button class="btn btn-secondary btn-sm" @onclick="CancelLocationEdit">Cancel</button>
                                    </td>
                                </tr>
                            }
                            else
                            {
                                <tr>
                                    <td>@location.Location_ID</td>
                                    <td>@location.Name</td>
                                    <td>@GetLocationPath(location.Parent_Location!)</td>
                                    <td>
                                        <button class="btn btn-warning btn-sm me-1" @onclick="() => StartLocationEdit(location.Location_ID!)">Edit</button>
                                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteLocation(location.Location_ID!)">Delete</button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
                <div class="d-flex justify-content-between mt-3">
                    <button class="btn btn-primary" @onclick="PreviousPage" disabled="@(currentPage == 1)">Previous</button>
                    <span>Page @currentPage of @totalPages</span>
                    <button class="btn btn-primary" @onclick="NextPage" disabled="@(currentPage >= totalPages)">Next</button>
                </div>
            }
        </div>

        <!-- History Tab (Unchanged) -->
        <div class="tab-pane fade" id="history" role="tabpanel" aria-labelledby="history-tab">
            <div class="d-flex justify-content-between align-items-center mt-3">
                <h4>Pallet Location List</h4>
                <button class="btn btn-success" @onclick="OpenAddPalletLocationModal">Add Pallet Location</button>
            </div>
            <table class="table table-striped mt-2">
                <thead>
                    <tr>
                        <th>Pallet ID</th>
                        <th>Time In</th>
                        <th>Location ID</th>
                        <th>Time Out</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var pl in palletLocations)
                    {
                        if (editPalletLocationKey?.Pallet_ID == pl.Pallet_ID && editPalletLocationKey?.Time_In == pl.Time_In)
                        {
                            <tr>
                                <td>@pl.Pallet_ID</td>
                                <td>@editPalletLocation.Time_In.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                <td>
                                    <select class="form-control" @bind="editPalletLocation.Location_ID">
                                        @foreach (var loc in locations)
                                        {
                                            <option value="@loc.Location_ID">@loc.Name</option>
                                        }
                                    </select>
                                </td>
                                <td>
                                    <input class="form-control" type="datetime-local" @bind="editPalletLocation.Time_Out" />
                                </td>
                                <td>
                                    <button class="btn btn-success btn-sm" @onclick="SavePalletLocationEdit">Save</button>
                                    <button class="btn btn-secondary btn-sm" @onclick="CancelPalletLocationEdit">Cancel</button>
                                </td>
                            </tr>
                        }
                        else
                        {
                            <tr>
                                <td>@pl.Pallet_ID</td>
                                <td>@pl.Time_In.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                <td>@pl.Location?.Name</td>
                                <td>@(pl.Time_Out?.ToString("yyyy-MM-dd HH:mm:ss") ?? "Not Yet Out")</td>
                                <td>
                                    <button class="btn btn-warning btn-sm me-1" @onclick="() => StartPalletLocationEdit(pl.Pallet_ID!, pl.Time_In)">Edit</button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => DeletePalletLocation(pl.Pallet_ID!, pl.Time_In)">Delete</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

        <!-- Robots Tab (Unchanged) -->
        <div class="tab-pane fade" id="robots" role="tabpanel" aria-labelledby="robots-tab">
            <div class="d-flex justify-content-between align-items-center mt-3">
                <h4>Robot List</h4>
                <button class="btn btn-success" @onclick="OpenAddRobotModal">Add Robot ID</button>
            </div>
            <table class="table table-striped mt-2">
                <thead>
                    <tr>
                        <th>Robot ID</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var robot in robots)
                    {
                        <tr>
                            <td>@robot.Robot_ID</td>
                            <td>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteRobot(robot.Robot_ID!)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Move Pallet Modal (Unchanged) -->
<div class="modal fade" id="moveModal" tabindex="-1" aria-labelledby="moveModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="moveModalLabel">Move Pallet</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" @bind="selectedPalletId" />
                <div class="mb-3">
                    <label for="locationSelect" class="form-label">Select New Location</label>
                    <select id="locationSelect" class="form-control" @bind="selectedLocationId">
                        @foreach (var location in locations.Where(l => !palletLocations.Any(pl => pl.Location_ID == l.Location_ID && pl.Time_Out == null)))
                        {
                            <option value="@location.Location_ID">@location.Name</option>
                        }
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="ConfirmMoveWithConfirmation">Confirm</button>
            </div>
        </div>
    </div>
</div>

<!-- Add Pallet Modal (Unchanged) -->
<div class="modal fade" id="addPalletModal" tabindex="-1" aria-labelledby="addPalletModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addPalletModalLabel">Add New Pallet</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Pallet ID</label>
                    <input class="form-control" @bind="newPallet.Pallet_ID" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Status</label>
                    <input class="form-control" @bind="newPallet.Status" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Type</label>
                    <input class="form-control" @bind="newPallet.Type" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Size</label>
                    <input class="form-control" @bind="newPallet.Size" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Initial Location</label>
                    <select class="form-control" @bind="newPalletLocationId">
                        @foreach (var location in locations.Where(l => !palletLocations.Any(pl => pl.Location_ID == l.Location_ID && pl.Time_Out == null)))
                        {
                            <option value="@location.Location_ID">@location.Name</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">Robot Assigned</label>
                    <select class="form-control" @bind="selectedRobotId">
                        <option value="">Select Robot</option>
                        @foreach (var robot in robots)
                        {
                            <option value="@robot.Robot_ID">@robot.Robot_ID</option>
                        }
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="AddPallet">Add</button>
            </div>
        </div>
    </div>
</div>

<!-- Add Location Modal -->
<div class="modal fade" id="addLocationModal" tabindex="-1" aria-labelledby="addLocationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addLocationModalLabel">Add New Location</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Zone</label>
                    <select class="form-control" @bind="SelectedZone">
                        <option value="">Select or Enter New Zone</option>
                        @foreach (var zone in availableZones)
                        {
                            <option value="@zone">@zone</option>
                        }
                    </select>
                    <input class="form-control mt-2" @bind="SelectedZone" placeholder="Or enter new Zone (e.g., Z1)" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Rack</label>
                    <select class="form-control" @bind="SelectedRack" disabled="@(string.IsNullOrEmpty(SelectedZone))">
                        <option value="">Select or Enter New Rack</option>
                        @foreach (var rack in availableRacks)
                        {
                            <option value="@rack">@rack</option>
                        }
                    </select>
                    <input class="form-control mt-2" @bind="SelectedRack" placeholder="Or enter new Rack (e.g., R01)" disabled="@(string.IsNullOrEmpty(SelectedZone))" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Level</label>
                    <select class="form-control" @bind="SelectedLevel" disabled="@(string.IsNullOrEmpty(SelectedRack))">
                        <option value="">Select or Enter New Level</option>
                        @foreach (var level in availableLevels)
                        {
                            <option value="@level">@level</option>
                        }
                    </select>
                    <input class="form-control mt-2" @bind="SelectedLevel" placeholder="Or enter new Level (e.g., L01)" disabled="@(string.IsNullOrEmpty(SelectedRack))" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Bin</label>
                    <select class="form-control" @bind="SelectedBin" disabled="@(string.IsNullOrEmpty(SelectedLevel))">
                        <option value="">Select or Enter New Bin</option>
                        @foreach (var bin in availableBins)
                        {
                            <option value="@bin">@bin</option>
                        }
                    </select>
                    <input class="form-control mt-2" @bind="SelectedBin" placeholder="Or enter new Bin (e.g., B01)" disabled="@(string.IsNullOrEmpty(SelectedLevel))" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Location ID (Auto-generated)</label>
                    <input class="form-control" @bind="newLocation.Location_ID" readonly />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="AddLocation">Add</button>
            </div>
        </div>
    </div>
</div>

<!-- Add Pallet Location Modal (Unchanged) -->
<div class="modal fade" id="addPalletLocationModal" tabindex="-1" aria-labelledby="addPalletLocationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addPalletLocationModalLabel">Add New Pallet Location</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Pallet ID</label>
                    <select class="form-control" @bind="newPalletLocation.Pallet_ID">
                        @foreach (var pallet in pallets)
                        {
                            <option value="@pallet.Pallet_ID">@pallet.Pallet_ID</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">Time In</label>
                    <input class="form-control" type="datetime-local" @bind="newPalletLocation.Time_In" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Location ID</label>
                    <select class="form-control" @bind="newPalletLocation.Location_ID">
                        @foreach (var location in locations)
                        {
                            <option value="@location.Location_ID">@location.Name</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">Time Out</label>
                    <input class="form-control" type="datetime-local" @bind="newPalletLocation.Time_Out" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="AddPalletLocation">Add</button>
            </div>
        </div>
    </div>
</div>

<!-- Add Robot Modal (Unchanged) -->
<div class="modal fade" id="addRobotModal" tabindex="-1" aria-labelledby="addRobotModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addRobotModalLabel">Add Robot ID</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Robot ID</label>
                    <input class="form-control" @bind="newRobotId" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="AddRobot">Add</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<PalletViewModel> pallets = new();
    private List<Location> locations = new();
    private List<Pallet_Location> palletLocations = new();
    private List<Robot> robots = new();
    private string? selectedPalletId;
    private string? selectedLocationId;
    private string? selectedRobotId;
    private string? editPalletId;
    private Pallet editPallet = new();
    private Pallet newPallet = new();
    private string? newPalletLocationId;
    private string? editLocationId;
    private Location editLocation = new();
    private Location newLocation = new();
    private (string Pallet_ID, DateTime Time_In)? editPalletLocationKey;
    private Pallet_Location editPalletLocation = new();
    private Pallet_Location newPalletLocation = new();
    private string? newRobotId;

    // Pagination fields for Locations tab
    private bool isLoadingLocations = true;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalLocations;
    private int totalPages => (int)Math.Ceiling((double)totalLocations / pageSize);

    // Biến lưu giá trị nhập tay hoặc chọn
    private string? selectedZone;
    private string? selectedRack;
    private string? selectedLevel;
    private string? selectedBin;

    // Danh sách tùy chọn từ database
    private List<string> availableZones = new();
    private List<string> availableRacks = new();
    private List<string> availableLevels = new();
    private List<string> availableBins = new();

    // Property với setter
    private string SelectedZone
    {
        get => selectedZone ?? "";
        set
        {
            selectedZone = value;
            selectedRack = "";
            selectedLevel = "";
            selectedBin = "";
            UpdateAvailableRacks();
            UpdateLocationId();
        }
    }

    private string SelectedRack
    {
        get => selectedRack ?? "";
        set
        {
            selectedRack = value;
            selectedLevel = "";
            selectedBin = "";
            UpdateAvailableLevels();
            UpdateLocationId();
        }
    }

    private string SelectedLevel
    {
        get => selectedLevel ?? "";
        set
        {
            selectedLevel = value;
            selectedBin = "";
            UpdateAvailableBins();
            UpdateLocationId();
        }
    }

    private string SelectedBin
    {
        get => selectedBin ?? "";
        set
        {
            selectedBin = value;
            UpdateLocationId();
        }
    }

    private void UpdateLocationId()
    {
        var parts = new List<string>();
        if (!string.IsNullOrEmpty(selectedZone)) parts.Add(selectedZone);
        if (!string.IsNullOrEmpty(selectedRack)) parts.Add(selectedRack);
        if (!string.IsNullOrEmpty(selectedLevel)) parts.Add(selectedLevel);
        if (!string.IsNullOrEmpty(selectedBin)) parts.Add(selectedBin);
        newLocation.Location_ID = string.Join("", parts); // Ghép liền không dấu "/"
        newLocation.Name = parts.LastOrDefault() ?? "";
        StateHasChanged(); // Cập nhật giao diện
    }

    private void UpdateAvailableZones()
    {
        availableZones = locations
            .Where(l => string.IsNullOrEmpty(l.Parent_Location_ID))
            .Select(l => l.Location_ID!)
            .Distinct()
            .ToList();
    }

    private void UpdateAvailableRacks()
    {
        availableRacks = locations
            .Where(l => l.Parent_Location_ID == selectedZone)
            .Select(l => l.Location_ID!.Substring(selectedZone!.Length))
            .Distinct()
            .ToList();
    }

    private void UpdateAvailableLevels()
    {
        var parentId = selectedZone + selectedRack;
        availableLevels = locations
            .Where(l => l.Parent_Location_ID == parentId)
            .Select(l => l.Location_ID!.Substring(parentId.Length))
            .Distinct()
            .ToList();
    }

    private void UpdateAvailableBins()
    {
        var parentId = selectedZone + selectedRack + selectedLevel;
        availableBins = locations
            .Where(l => l.Parent_Location_ID == parentId)
            .Select(l => l.Location_ID!.Substring(parentId.Length))
            .Distinct()
            .ToList();
    }

    private async Task OpenAddLocationModal()
    {
        newLocation = new Location();
        SelectedZone = "";
        SelectedRack = "";
        SelectedLevel = "";
        SelectedBin = "";
        newLocation.Location_ID = "";
        UpdateAvailableZones(); // Load danh sách zones từ database
        availableRacks.Clear();
        availableLevels.Clear();
        availableBins.Clear();
        await JSRuntime.InvokeVoidAsync("showModal", "addLocationModal");
    }

    private async Task AddLocation()
    {
        if (string.IsNullOrEmpty(newLocation.Location_ID))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter or select at least one level to create a location.");
            return;
        }
        if (locations.Any(l => l.Location_ID!.Equals(newLocation.Location_ID, StringComparison.OrdinalIgnoreCase)))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Location ID already exists. Please enter or select a different combination.");
            return;
        }

        // Tách chuỗi Location_ID dựa trên các phần đã nhập/chọn
        var parts = new List<string>();
        if (!string.IsNullOrEmpty(selectedZone)) parts.Add(selectedZone);
        if (!string.IsNullOrEmpty(selectedRack)) parts.Add(selectedRack);
        if (!string.IsNullOrEmpty(selectedLevel)) parts.Add(selectedLevel);
        if (!string.IsNullOrEmpty(selectedBin)) parts.Add(selectedBin);

        var currentPath = "";
        // Thêm từng cấp parent nếu chưa tồn tại
        for (int i = 0; i < parts.Count - 1; i++)
        {
            currentPath = string.Join("", parts.Take(i + 1)); // Ghép liền: "Z1", "Z1R01", "Z1R01L01"
            if (!locations.Any(l => l.Location_ID == currentPath))
            {
                var parentLocation = new Location
                    {
                        Location_ID = currentPath,
                        Name = parts[i], // Tên là phần cuối của cấp hiện tại
                        Parent_Location_ID = i > 0 ? string.Join("", parts.Take(i)) : null // Parent của cấp trước đó
                    };
                await WarehouseService.AddLocationAsync(parentLocation);
                locations.Add(parentLocation); // Cập nhật danh sách trong bộ nhớ
            }
        }

        // Gán Parent_Location_ID và thêm location cuối cùng
        newLocation.Parent_Location_ID = parts.Count > 1 ? string.Join("", parts.Take(parts.Count - 1)) : null;
        await WarehouseService.AddLocationAsync(newLocation);
        await JSRuntime.InvokeVoidAsync("hideModal", "addLocationModal");
        await LoadLocations();
        StateHasChanged(); // Đảm bảo giao diện được cập nhật
    }

    protected override async Task OnInitializedAsync()
    {
        pallets = await WarehouseService.GetPalletsAsync();
        await LoadLocations(); // Load locations with pagination
        palletLocations = await WarehouseService.GetPalletLocationsAsync();
        robots = await WarehouseService.GetRobotsAsync();
    }

    private async Task LoadLocations()
    {
        isLoadingLocations = true;
        locations = await WarehouseService.GetLocationsAsync(currentPage, pageSize);
        totalLocations = await WarehouseService.GetLocationCountAsync();
        isLoadingLocations = false;
        StateHasChanged();
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadLocations();
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadLocations();
        }
    }

    // Các phương thức khác giữ nguyên (Pallets, Pallet Locations, Robots)
    private async Task ConfirmMoveWithConfirmation()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to move this pallet?");
        if (confirmed)
        {
            await ConfirmMove();
        }
    }

    private async Task ConfirmMove()
    {
        if (string.IsNullOrEmpty(selectedLocationId))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please select a new location.");
            return;
        }
        await WarehouseService.MovePalletAsync(selectedPalletId!, selectedLocationId);
        await JSRuntime.InvokeVoidAsync("hideModal", "moveModal");
        pallets = await WarehouseService.GetPalletsAsync();
        palletLocations = await WarehouseService.GetPalletLocationsAsync();
    }

    private async Task OpenMoveModal(string palletId)
    {
        selectedPalletId = palletId;
        selectedLocationId = locations.FirstOrDefault(l => !palletLocations.Any(pl => pl.Location_ID == l.Location_ID && pl.Time_Out == null))?.Location_ID;
        if (string.IsNullOrEmpty(selectedLocationId))
        {
            await JSRuntime.InvokeVoidAsync("alert", "There are no available locations to move to.");
            return;
        }
        await JSRuntime.InvokeVoidAsync("showModal", "moveModal");
    }

    private async Task StartPalletEdit(string palletId)
    {
        editPalletId = palletId;
        editPallet = await WarehouseService.GetPalletByIdAsync(palletId);
    }

    private async Task SavePalletEdit(string palletId)
    {
        if (string.IsNullOrWhiteSpace(editPallet.Status))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Status cannot be empty.");
            return;
        }
        await WarehouseService.UpdatePalletAsync(editPallet);
        editPalletId = null;
        pallets = await WarehouseService.GetPalletsAsync();
    }

    private void CancelPalletEdit()
    {
        editPalletId = null;
        editPallet = new();
    }

    private async Task DeletePallet(string palletId)
    {
        await WarehouseService.DeletePalletAsync(palletId);
        pallets = await WarehouseService.GetPalletsAsync();
        palletLocations = await WarehouseService.GetPalletLocationsAsync();
    }

    private async Task OpenAddPalletModal()
    {
        newPallet = new Pallet { Creation_Date = DateTime.Now };
        newPalletLocationId = locations.FirstOrDefault(l => !palletLocations.Any(pl => pl.Location_ID == l.Location_ID && pl.Time_Out == null))?.Location_ID;
        selectedRobotId = robots.FirstOrDefault()?.Robot_ID;
        if (string.IsNullOrEmpty(newPalletLocationId))
        {
            await JSRuntime.InvokeVoidAsync("alert", "There are no available locations to add a pallet.");
            return;
        }
        await JSRuntime.InvokeVoidAsync("showModal", "addPalletModal");
    }

    private async Task AddPallet()
    {
        if (string.IsNullOrWhiteSpace(newPallet.Pallet_ID) ||
            string.IsNullOrWhiteSpace(newPallet.Status) ||
            string.IsNullOrWhiteSpace(newPallet.Type) ||
            string.IsNullOrWhiteSpace(newPallet.Size) ||
            string.IsNullOrEmpty(newPalletLocationId))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please fill in all required information for the pallet.");
            return;
        }
        if (pallets.Any(p => p.Pallet_ID!.Equals(newPallet.Pallet_ID, StringComparison.OrdinalIgnoreCase)))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Pallet ID already exists. Please enter a different ID.");
            return;
        }
        var selectedRobot = robots.FirstOrDefault(r => r.Robot_ID == selectedRobotId);
        newPallet.Robot_ID = selectedRobot?.Robot_ID!;
        await WarehouseService.AddPalletAsync(newPallet, newPalletLocationId, selectedRobot!);
        await JSRuntime.InvokeVoidAsync("hideModal", "addPalletModal");
        pallets = await WarehouseService.GetPalletsAsync();
        palletLocations = await WarehouseService.GetPalletLocationsAsync();
    }

    private async Task StartLocationEdit(string locationId)
    {
        editLocationId = locationId;
        editLocation = await WarehouseService.GetLocationByIdAsync(locationId);
    }

    private async Task SaveLocationEdit(string locationId)
    {
        if (string.IsNullOrWhiteSpace(editLocation.Name))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Location name cannot be empty.");
            return;
        }
        if (editLocation.Parent_Location_ID == editLocation.Location_ID)

        {
            await JSRuntime.InvokeVoidAsync("alert", "Parent location cannot be the same as the location itself.");
            return;
        }
        await WarehouseService.UpdateLocationAsync(editLocation);
        editLocationId = null;
        await LoadLocations();
    }

    private void CancelLocationEdit()
    {
        editLocationId = null;
        editLocation = new();
    }

    private async Task DeleteLocation(string locationId)
    {
        try
        {
            await WarehouseService.DeleteLocationAsync(locationId);
            await LoadLocations();
            palletLocations = await WarehouseService.GetPalletLocationsAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", ex.Message);
        }
    }

    private string GetLocationPath(Location location)
    {
        if (location == null) return "None";

        var path = new List<string> { location.Name! };
        var currentLocation = location;

        while (!string.IsNullOrEmpty(currentLocation.Parent_Location_ID))
        {
            currentLocation = locations.FirstOrDefault(l => l.Location_ID == currentLocation.Parent_Location_ID);
            if (currentLocation != null)
            {
                path.Insert(0, currentLocation.Name!);
            }
            else
            {
                break;
            }
        }

        return string.Join("", path); // Đồng bộ với Location_ID không có "/"
    }

    private async Task StartPalletLocationEdit(string palletId, DateTime timeIn)
    {
        editPalletLocationKey = (palletId, timeIn);
        editPalletLocation = await WarehouseService.GetPalletLocationByIdAsync(palletId, timeIn);
    }

    private async Task SavePalletLocationEdit()
    {
        if (string.IsNullOrWhiteSpace(editPalletLocation.Location_ID))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please select a location.");
            return;
        }
        await WarehouseService.UpdatePalletLocationAsync(editPalletLocation);
        editPalletLocationKey = null;
        palletLocations = await WarehouseService.GetPalletLocationsAsync();
    }

    private void CancelPalletLocationEdit()
    {
        editPalletLocationKey = null;
        editPalletLocation = new();
    }

    private async Task DeletePalletLocation(string palletId, DateTime timeIn)
    {
        await WarehouseService.DeletePalletLocationAsync(palletId, timeIn);
        palletLocations = await WarehouseService.GetPalletLocationsAsync();
        pallets = await WarehouseService.GetPalletsAsync();
    }

    private async Task OpenAddPalletLocationModal()
    {
        newPalletLocation = new Pallet_Location { Time_In = DateTime.Now };
        if (!pallets.Any() || !locations.Any())
        {
            await JSRuntime.InvokeVoidAsync("alert", "At least one pallet and one location are required to add a pallet location.");
            return;
        }
        newPalletLocation.Pallet_ID = pallets.First().Pallet_ID;
        newPalletLocation.Location_ID = locations.First().Location_ID;
        await JSRuntime.InvokeVoidAsync("showModal", "addPalletLocationModal");
    }

    private async Task AddPalletLocation()
    {
        if (string.IsNullOrWhiteSpace(newPalletLocation.Pallet_ID) ||
            string.IsNullOrWhiteSpace(newPalletLocation.Location_ID))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please select a pallet and a location.");
            return;
        }
        if (palletLocations.Any(pl => pl.Pallet_ID == newPalletLocation.Pallet_ID && pl.Time_In == newPalletLocation.Time_In))
        {
            await JSRuntime.InvokeVoidAsync("alert", "This pallet location record already exists. Please check the Time In value.");
            return;
        }
        await WarehouseService.AddPalletLocationAsync(newPalletLocation);
        await JSRuntime.InvokeVoidAsync("hideModal", "addPalletLocationModal");
        palletLocations = await WarehouseService.GetPalletLocationsAsync();
        pallets = await WarehouseService.GetPalletsAsync();
    }

    private async Task OpenAddRobotModal()
    {
        newRobotId = string.Empty;
        await JSRuntime.InvokeVoidAsync("showModal", "addRobotModal");
    }

    private async Task AddRobot()
    {
        if (string.IsNullOrWhiteSpace(newRobotId))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter a Robot ID.");
            return;
        }
        if (robots.Any(r => r.Robot_ID!.Equals(newRobotId, StringComparison.OrdinalIgnoreCase)))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Robot ID already exists. Please enter a different ID.");
            return;
        }
        var newRobot = new Robot { Robot_ID = newRobotId };
        await WarehouseService.AddRobotAsync(newRobot);
        await JSRuntime.InvokeVoidAsync("hideModal", "addRobotModal");
        robots = await WarehouseService.GetRobotsAsync();
    }

    private async Task DeleteRobot(string robotId)
    {
        try
        {
            await WarehouseService.DeleteRobotAsync(robotId);
            robots = await WarehouseService.GetRobotsAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", ex.Message);
        }
    }
}